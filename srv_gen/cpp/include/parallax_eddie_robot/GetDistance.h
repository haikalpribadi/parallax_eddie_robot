/* Auto-generated by genmsg_cpp for file /home/haikalpribadi/Workspaces/ROS/haikalpribadi-ros-pkg/parallax_eddie_robot/srv/GetDistance.srv */
#ifndef PARALLAX_EDDIE_ROBOT_SERVICE_GETDISTANCE_H
#define PARALLAX_EDDIE_ROBOT_SERVICE_GETDISTANCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace parallax_eddie_robot
{
template <class ContainerAllocator>
struct GetDistanceRequest_ {
  typedef GetDistanceRequest_<ContainerAllocator> Type;

  GetDistanceRequest_()
  {
  }

  GetDistanceRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "parallax_eddie_robot/GetDistanceRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "febc810ab9cc360ca3f47fcee4f2ba71"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetDistanceRequest
typedef  ::parallax_eddie_robot::GetDistanceRequest_<std::allocator<void> > GetDistanceRequest;

typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceRequest> GetDistanceRequestPtr;
typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceRequest const> GetDistanceRequestConstPtr;


template <class ContainerAllocator>
struct GetDistanceResponse_ {
  typedef GetDistanceResponse_<ContainerAllocator> Type;

  GetDistanceResponse_()
  : left(0)
  , right(0)
  {
  }

  GetDistanceResponse_(const ContainerAllocator& _alloc)
  : left(0)
  , right(0)
  {
  }

  typedef int32_t _left_type;
  int32_t left;

  typedef int32_t _right_type;
  int32_t right;


private:
  static const char* __s_getDataType_() { return "parallax_eddie_robot/GetDistanceResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "febc810ab9cc360ca3f47fcee4f2ba71"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "febc810ab9cc360ca3f47fcee4f2ba71"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 left\n\
int32 right\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, left);
    ros::serialization::serialize(stream, right);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, left);
    ros::serialization::deserialize(stream, right);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(left);
    size += ros::serialization::serializationLength(right);
    return size;
  }

  typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetDistanceResponse
typedef  ::parallax_eddie_robot::GetDistanceResponse_<std::allocator<void> > GetDistanceResponse;

typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceResponse> GetDistanceResponsePtr;
typedef boost::shared_ptr< ::parallax_eddie_robot::GetDistanceResponse const> GetDistanceResponseConstPtr;

struct GetDistance
{

typedef GetDistanceRequest Request;
typedef GetDistanceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetDistance
} // namespace parallax_eddie_robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetDistanceRequest";
  }

  static const char* value(const  ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "febc810ab9cc360ca3f47fcee4f2ba71";
  }

  static const char* value(const  ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfebc810ab9cc360cULL;
  static const uint64_t static_value2 = 0xa3f47fcee4f2ba71ULL;
};

template<class ContainerAllocator>
struct DataType< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetDistanceResponse";
  }

  static const char* value(const  ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 left\n\
int32 right\n\
\n\
\n\
";
  }

  static const char* value(const  ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetDistanceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left);
    stream.next(m.right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetDistanceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<parallax_eddie_robot::GetDistance> {
  static const char* value() 
  {
    return "febc810ab9cc360ca3f47fcee4f2ba71";
  }

  static const char* value(const parallax_eddie_robot::GetDistance&) { return value(); } 
};

template<>
struct DataType<parallax_eddie_robot::GetDistance> {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetDistance";
  }

  static const char* value(const parallax_eddie_robot::GetDistance&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "febc810ab9cc360ca3f47fcee4f2ba71";
  }

  static const char* value(const parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetDistance";
  }

  static const char* value(const parallax_eddie_robot::GetDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "febc810ab9cc360ca3f47fcee4f2ba71";
  }

  static const char* value(const parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetDistance";
  }

  static const char* value(const parallax_eddie_robot::GetDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PARALLAX_EDDIE_ROBOT_SERVICE_GETDISTANCE_H

