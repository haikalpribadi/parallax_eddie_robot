/* Auto-generated by genmsg_cpp for file /home/haikalpribadi/Workspaces/ROS/haikalpribadi-ros-pkg/parallax_eddie_robot/srv/GetSpeed.srv */
#ifndef PARALLAX_EDDIE_ROBOT_SERVICE_GETSPEED_H
#define PARALLAX_EDDIE_ROBOT_SERVICE_GETSPEED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace parallax_eddie_robot
{
template <class ContainerAllocator>
struct GetSpeedRequest_ {
  typedef GetSpeedRequest_<ContainerAllocator> Type;

  GetSpeedRequest_()
  {
  }

  GetSpeedRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "parallax_eddie_robot/GetSpeedRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "09d1b2323a1aeae9343e81809a820b60"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSpeedRequest
typedef  ::parallax_eddie_robot::GetSpeedRequest_<std::allocator<void> > GetSpeedRequest;

typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedRequest> GetSpeedRequestPtr;
typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedRequest const> GetSpeedRequestConstPtr;


template <class ContainerAllocator>
struct GetSpeedResponse_ {
  typedef GetSpeedResponse_<ContainerAllocator> Type;

  GetSpeedResponse_()
  : left(0)
  , right(0)
  {
  }

  GetSpeedResponse_(const ContainerAllocator& _alloc)
  : left(0)
  , right(0)
  {
  }

  typedef int16_t _left_type;
  int16_t left;

  typedef int16_t _right_type;
  int16_t right;


private:
  static const char* __s_getDataType_() { return "parallax_eddie_robot/GetSpeedResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "09d1b2323a1aeae9343e81809a820b60"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "09d1b2323a1aeae9343e81809a820b60"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16 left\n\
int16 right\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, left);
    ros::serialization::serialize(stream, right);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, left);
    ros::serialization::deserialize(stream, right);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(left);
    size += ros::serialization::serializationLength(right);
    return size;
  }

  typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSpeedResponse
typedef  ::parallax_eddie_robot::GetSpeedResponse_<std::allocator<void> > GetSpeedResponse;

typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedResponse> GetSpeedResponsePtr;
typedef boost::shared_ptr< ::parallax_eddie_robot::GetSpeedResponse const> GetSpeedResponseConstPtr;

struct GetSpeed
{

typedef GetSpeedRequest Request;
typedef GetSpeedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetSpeed
} // namespace parallax_eddie_robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetSpeedRequest";
  }

  static const char* value(const  ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09d1b2323a1aeae9343e81809a820b60";
  }

  static const char* value(const  ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x09d1b2323a1aeae9ULL;
  static const uint64_t static_value2 = 0x343e81809a820b60ULL;
};

template<class ContainerAllocator>
struct DataType< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetSpeedResponse";
  }

  static const char* value(const  ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 left\n\
int16 right\n\
\n\
\n\
";
  }

  static const char* value(const  ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSpeedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left);
    stream.next(m.right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSpeedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<parallax_eddie_robot::GetSpeed> {
  static const char* value() 
  {
    return "09d1b2323a1aeae9343e81809a820b60";
  }

  static const char* value(const parallax_eddie_robot::GetSpeed&) { return value(); } 
};

template<>
struct DataType<parallax_eddie_robot::GetSpeed> {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetSpeed";
  }

  static const char* value(const parallax_eddie_robot::GetSpeed&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09d1b2323a1aeae9343e81809a820b60";
  }

  static const char* value(const parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetSpeed";
  }

  static const char* value(const parallax_eddie_robot::GetSpeedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09d1b2323a1aeae9343e81809a820b60";
  }

  static const char* value(const parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "parallax_eddie_robot/GetSpeed";
  }

  static const char* value(const parallax_eddie_robot::GetSpeedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PARALLAX_EDDIE_ROBOT_SERVICE_GETSPEED_H

